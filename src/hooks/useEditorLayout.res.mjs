// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as React from "react";
import * as EditorContext from "../screens/editor/EditorContext.res.mjs";
import * as UseDimensions from "./useDimensions.res.mjs";

function sizeToStyle(param) {
  return {
          height: String(param.height) + "px",
          width: String(param.width) + "px"
        };
}

function calculatePreviewSize(windowDimensions, param, min_media_controls_width, min_timeline_height) {
  var height = param.height;
  var width = param.width;
  var max_preview_width = windowDimensions.width - min_media_controls_width | 0;
  var max_preview_height = windowDimensions.height - min_timeline_height | 0;
  if (!(width > max_preview_width || height > max_preview_height)) {
    return {
            height: height,
            width: width,
            scale: 1.0
          };
  }
  var scale = Caml.float_min(max_preview_width / width, max_preview_height / height);
  return {
          height: height * scale,
          width: width * scale,
          scale: scale
        };
}

function useEditorLayout(isFullScreen) {
  var viewportSize = UseDimensions.useDimensions();
  var match = EditorContext.useEditorContext();
  var videoMeta = match.videoMeta;
  return React.useMemo((function () {
                if (isFullScreen) {
                  return {
                          preview: calculatePreviewSize(viewportSize, videoMeta, 0, 0),
                          timeLine: undefined,
                          mediaControls: undefined
                        };
                } else {
                  var previewSize = calculatePreviewSize(viewportSize, videoMeta, 400, 450);
                  return {
                          preview: previewSize,
                          timeLine: {
                            height: viewportSize.height - previewSize.height,
                            width: viewportSize.width,
                            scale: 1.0
                          },
                          mediaControls: {
                            height: previewSize.height,
                            width: viewportSize.width - previewSize.width,
                            scale: 1.0
                          }
                        };
                }
              }), [
              viewportSize.height,
              viewportSize.width,
              isFullScreen
            ]);
}

var min_timeline_height = 450;

var min_media_controls_width = 400;

var emptySize = {
  height: 0.0,
  width: 0.0,
  scale: 0.0
};

export {
  min_timeline_height ,
  min_media_controls_width ,
  emptySize ,
  sizeToStyle ,
  calculatePreviewSize ,
  useEditorLayout ,
}
/* react Not a pure module */
