// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Web from "../../bindings/Web.res.mjs";
import * as Hooks from "../../hooks/Hooks.res.mjs";
import * as Utils from "../../Utils.res.mjs";
import * as React from "react";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Webapi__Dom__Window from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Window.res.mjs";
import * as Webapi__Dom__EventTarget from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__EventTarget.res.mjs";

var DocumentEvent = Webapi__Dom__EventTarget.Impl({});

function formatAction(action) {
  switch (action) {
    case "PlayOrPause" :
        return "Play or Pause";
    case "SeekForward" :
        return "Seek Forward";
    case "SeekBack" :
        return "Seek Back";
    case "IncreaseVolume" :
        return "Increase Volume";
    case "DecreaseVolume" :
        return "Decrease Volume";
    case "EditCurrentSubtitle" :
        return "Edit Current Subtitle";
    case "ToggleDock" :
        return "Toggle Dock";
    case "StartRender" :
        return "Render final video";
    case "ToggleFullScreen" :
        return "Toggle Full Screen";
    case "SeekToStart" :
        return "Seek To Start";
    case "SeekToEnd" :
        return "Seek To End";
    case "Mute" :
        return "Mute";
    case "SeekToNextCue" :
        return "Seek to next cue";
    case "SeekToPreviousCue" :
        return "Seek to previous cue";
    
  }
}

function validateEventModifier(e, modifier) {
  switch (modifier) {
    case "Shift" :
        return e.shiftKey;
    case "Meta" :
        return e.metaKey;
    case "Ctrl" :
        return e.ctrlKey;
    case "NoModifier" :
        if (!e.shiftKey && !e.metaKey && !e.ctrlKey) {
          return Utils.Bool.invert(Web.isFocusable(e.target));
        } else {
          return false;
        }
    
  }
}

function matchAction(e, shortcuts) {
  return shortcuts.find(function (shortcut) {
              if (shortcut.key === e.key) {
                return validateEventModifier(e, shortcut.modifier);
              } else {
                return false;
              }
            });
}

function useKeyboardShortcuts(shortcuts, fn) {
  var handleKeydown = Hooks.useEvent(function (e) {
        Core__Option.forEach(matchAction(e, shortcuts), fn);
      });
  React.useEffect((function () {
          window.addEventListener("keydown", handleKeydown);
          return (function () {
                    window.removeEventListener("keydown", handleKeydown);
                  });
        }), []);
}

export {
  DocumentEvent ,
  formatAction ,
  validateEventModifier ,
  matchAction ,
  useKeyboardShortcuts ,
}
/* DocumentEvent Not a pure module */
