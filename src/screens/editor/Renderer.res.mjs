// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as UseObservable from "../../hooks/useObservable.res.mjs";

function reducer(state, action) {
  switch (action.TAG) {
    case "SetX" :
        return {
                x: action._0,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetY" :
        return {
                x: state.x,
                y: action._0,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetFontFamily" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: action._0,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetFontWeight" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: action._0,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetFontSizePx" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: action._0,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetColor" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: action._0,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetStrokeColor" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: action._0,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetStrokeWidth" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: action._0,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetBlockWidth" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: action._0,
                blockHeight: state.blockHeight,
                align: state.align
              };
    case "SetBlockHeight" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: action._0,
                align: state.align
              };
    case "SetAlign" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                strokeWidth: state.strokeWidth,
                blockWidth: state.blockWidth,
                blockHeight: state.blockHeight,
                align: action._0
              };
    
  }
}

var Observer_initial = {
  x: 0,
  y: 0,
  fontFamily: "Arial",
  fontWeight: 400,
  fontSizePx: 16,
  color: "#fff",
  strokeColor: "black",
  strokeWidth: 0,
  blockWidth: 0,
  blockHeight: 0,
  align: "Center"
};

var Observer = {
  initial: Observer_initial,
  reducer: reducer
};

var include = UseObservable.MakeObserver(Observer);

function renderVideoFrame(videoMeta, videoElement) {
  return function (ctx, dx, dy, dirtyWidth, dirtyHeight) {
    ctx.drawImage(videoElement, Core__Option.getOr(dx, 0), Core__Option.getOr(dy, 0), Core__Option.getOr(dirtyWidth, videoMeta.width), Core__Option.getOr(dirtyHeight, videoMeta.height));
  };
}

var dispatch = include.dispatch;

var get = include.get;

var subscribe = include.subscribe;

var useObservable = include.useObservable;

export {
  Observer ,
  dispatch ,
  get ,
  subscribe ,
  useObservable ,
  renderVideoFrame ,
}
/* include Not a pure module */
