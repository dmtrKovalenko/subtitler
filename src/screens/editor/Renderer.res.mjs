// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as UseObservable from "../../hooks/useObservable.res.mjs";

function reducer(state, action) {
  switch (action.TAG) {
    case "SetPosition" :
        return {
                x: action._0,
                y: action._1,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: state.blockSize
              };
    case "SetFontFamily" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: action._0,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: state.blockSize
              };
    case "SetFontWeight" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: action._0,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: state.blockSize
              };
    case "SetFontSizePx" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: action._0,
                color: state.color,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: state.blockSize
              };
    case "SetColor" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: action._0,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: state.blockSize
              };
    case "SetStrokeColor" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: action._0,
                align: state.align,
                blockSize: state.blockSize
              };
    case "SetBlockWidth" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: {
                  width: action._0,
                  height: state.blockSize.height
                }
              };
    case "SetBlockHeight" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: {
                  width: state.blockSize.width,
                  height: action._0
                }
              };
    case "SetAlign" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                align: action._0,
                blockSize: state.blockSize
              };
    case "Resize" :
        return {
                x: state.x,
                y: state.y,
                fontFamily: state.fontFamily,
                fontWeight: state.fontWeight,
                fontSizePx: state.fontSizePx,
                color: state.color,
                strokeColor: state.strokeColor,
                align: state.align,
                blockSize: action._0
              };
    
  }
}

var RendererObservable_initial = {
  x: 0,
  y: 0,
  fontFamily: "Inter",
  fontWeight: 400,
  fontSizePx: 44,
  color: "#ffffff",
  strokeColor: undefined,
  align: "Center",
  blockSize: {
    width: 200,
    height: 44
  }
};

var RendererObservable = {
  initial: RendererObservable_initial,
  reducer: reducer
};

var Observer = UseObservable.MakeObserver(RendererObservable);

function renderVideoFrame(videoMeta, videoElement) {
  return function (ctx, dx, dy, dirtyWidth, dirtyHeight) {
    ctx.drawImage(videoElement, Core__Option.getOr(dx, 0), Core__Option.getOr(dy, 0), Core__Option.getOr(dirtyWidth, videoMeta.width), Core__Option.getOr(dirtyHeight, videoMeta.height));
  };
}

var useStyle = Observer.useObservable;

var dispatch = Observer.dispatch;

export {
  RendererObservable ,
  Observer ,
  useStyle ,
  dispatch ,
  renderVideoFrame ,
}
/* Observer Not a pure module */
