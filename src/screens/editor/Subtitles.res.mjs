// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.res.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function start(chunk) {
  return chunk.timestamp[0];
}

function end(chunk) {
  return chunk.timestamp[1];
}

function compareTsToRange(range, ts) {
  var end = range[1];
  var start = range[0];
  if (end === null || end === undefined) {
    return Caml_obj.greaterequal(ts, start);
  } else if (Caml_obj.lessequal(start, ts)) {
    return Caml_obj.lessthan(ts, end);
  } else {
    return false;
  }
}

function lookupCurrentCue(subtitles, timestamp) {
  return Core__Option.map(Belt_Array.getIndexBy(subtitles, (function (subtitle) {
                    return compareTsToRange(subtitle.timestamp, timestamp);
                  })), (function (currentIndex) {
                var currentCue = subtitles[currentIndex];
                return {
                        currentIndex: currentIndex,
                        currentCue: currentCue
                      };
              }));
}

function getOrLookupCurrentCue(timestamp, subtitles, prevCue) {
  if (prevCue !== undefined) {
    if (compareTsToRange(prevCue.currentCue.timestamp, timestamp)) {
      return prevCue;
    } else {
      return Core__Option.flatMap(subtitles[prevCue.currentIndex + 1 | 0], (function (nextCue) {
                    if (compareTsToRange(nextCue.timestamp, timestamp)) {
                      return {
                              currentIndex: prevCue.currentIndex + 1 | 0,
                              currentCue: nextCue
                            };
                    } else {
                      return lookupCurrentCue(subtitles, timestamp);
                    }
                  }));
    }
  } else {
    return lookupCurrentCue(subtitles, timestamp);
  }
}

function averageChunkLength(subtitles) {
  var totalCharacters = Core__Array.reduce(subtitles, 0, (function (acc, subtitle) {
          return acc + subtitle.text.length | 0;
        }));
  return Caml_int32.div(totalCharacters, subtitles.length);
}

function addChunkId(chunk) {
  return {
          id: Math.random(),
          text: chunk.text,
          timestamp: chunk.timestamp
        };
}

function fillChunksIds(subtitles) {
  return subtitles.map(addChunkId);
}

function resizeChunks(wordChunks, maxSize) {
  var resizedChunks = [];
  var chunkInProgressRef = {
    contents: undefined
  };
  wordChunks.forEach(function (chunk) {
        var chunk$1 = addChunkId(chunk);
        var chunkInProgress = chunkInProgressRef.contents;
        if (chunkInProgress !== undefined) {
          if ((chunk$1.text.trim().length + chunkInProgress.text.trim().length | 0) < maxSize) {
            chunkInProgressRef.contents = {
              id: Math.random(),
              text: chunkInProgress.text + chunk$1.text,
              timestamp: [
                chunkInProgress.timestamp[0],
                chunk$1.timestamp[1]
              ]
            };
          } else {
            resizedChunks.push(chunkInProgress);
            chunkInProgressRef.contents = chunk$1;
          }
        } else {
          chunkInProgressRef.contents = chunk$1;
        }
      });
  Core__Option.forEach(chunkInProgressRef.contents, (function (chunk) {
          resizedChunks.push(chunk);
        }));
  return resizedChunks;
}

function editChunkText(chunks, index, newText) {
  return chunks.map(function (chunk, i) {
              if (i === index) {
                return {
                        id: chunk.id,
                        text: newText,
                        timestamp: chunk.timestamp
                      };
              } else {
                return chunk;
              }
            });
}

function sortChunks(chunks) {
  return chunks.toSorted(function (a, b) {
              var match = a.timestamp;
              var match$1 = b.timestamp;
              return match[0] - match$1[0];
            });
}

function editChunkTimestamp(chunks, index, newTimestamp) {
  return sortChunks(Utils.Log.andReturn(Utils.Log.andReturn(chunks).map(function (chunk, i) {
                      if (i === index) {
                        return {
                                id: chunk.id,
                                text: chunk.text,
                                timestamp: newTimestamp
                              };
                      } else {
                        return chunk;
                      }
                    })));
}

function removeChunk(chunks, index, joinSiblingsTimestamps) {
  var chunkToRemove = chunks[index];
  return Core__Option.getOr(Utils.Log.andReturn(Core__Option.map(chunkToRemove, (function (chunkToRemove) {
                        return Utils.$$Array.filterMapWithIndex(chunks, (function (chunk, i) {
                                      if (i === index) {
                                        return ;
                                      } else if (joinSiblingsTimestamps && i === (index - 1 | 0)) {
                                        return {
                                                id: chunk.id,
                                                text: chunk.text,
                                                timestamp: [
                                                  chunk.timestamp[0],
                                                  chunkToRemove.timestamp[1]
                                                ]
                                              };
                                      } else if (joinSiblingsTimestamps && i === (index + 1 | 0)) {
                                        return {
                                                id: chunk.id,
                                                text: chunk.text,
                                                timestamp: [
                                                  Core__Option.getOr(Caml_option.nullable_to_opt(chunkToRemove.timestamp[1]), chunk.timestamp[0]),
                                                  chunk.timestamp[1]
                                                ]
                                              };
                                      } else {
                                        return chunk;
                                      }
                                    }));
                      }))), chunks);
}

export {
  start ,
  end ,
  compareTsToRange ,
  lookupCurrentCue ,
  getOrLookupCurrentCue ,
  averageChunkLength ,
  addChunkId ,
  fillChunksIds ,
  resizeChunks ,
  editChunkText ,
  sortChunks ,
  editChunkTimestamp ,
  removeChunk ,
}
/* Utils Not a pure module */
