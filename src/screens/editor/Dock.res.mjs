// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.res.mjs";
import * as Hooks from "../../hooks/Hooks.res.mjs";
import * as Icons from "../../ui/Icons.res.mjs";
import * as Utils from "../../Utils.res.mjs";
import * as React from "react";
import * as Player from "../../Player.res.mjs";
import * as Slider from "../../ui/Slider.res.mjs";
import * as Spinner from "../../ui/Spinner.res.mjs";
import * as Shortcut from "./Shortcut.res.mjs";
import * as Subtitles from "./Subtitles.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.mjs";
import * as EditorContext from "./EditorContext.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Webapi__Dom__Window from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Window.res.mjs";
import * as Webapi__Dom__EventTarget from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__EventTarget.res.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as Outline from "@heroicons/react/24/outline";
import * as Webapi__Dom__HtmlInputElement from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__HtmlInputElement.res.mjs";

var DocumentEvent = Webapi__Dom__EventTarget.Impl({});

var shortcuts = [
  {
    action: "PlayOrPause",
    key: " ",
    modifier: "NoModifier"
  },
  {
    action: "SeekForward",
    key: "ArrowRight",
    modifier: "NoModifier"
  },
  {
    action: "SeekForward",
    key: "l",
    modifier: "NoModifier"
  },
  {
    action: "SeekBack",
    key: "ArrowLeft",
    modifier: "NoModifier"
  },
  {
    action: "SeekBack",
    key: "h",
    modifier: "NoModifier"
  },
  {
    action: "SeekToPreviousCue",
    key: "ArrowUp",
    modifier: "NoModifier"
  },
  {
    action: "SeekToPreviousCue",
    key: "k",
    modifier: "NoModifier"
  },
  {
    action: "SeekToNextCue",
    key: "ArrowDown",
    modifier: "NoModifier"
  },
  {
    action: "SeekToNextCue",
    key: "j",
    modifier: "NoModifier"
  },
  {
    action: "EditCurrentSubtitle",
    key: "i",
    modifier: "NoModifier"
  },
  {
    action: "EditCurrentSubtitle",
    key: "Enter",
    modifier: "NoModifier"
  },
  {
    action: "ToggleDock",
    key: "t",
    modifier: "NoModifier"
  },
  {
    action: "StartRender",
    key: "r",
    modifier: "NoModifier"
  },
  {
    action: "ToggleFullScreen",
    key: "f",
    modifier: "NoModifier"
  },
  {
    action: "Mute",
    key: "m",
    modifier: "NoModifier"
  },
  {
    action: "SeekToStart",
    key: "Home",
    modifier: "NoModifier"
  },
  {
    action: "SeekToStart",
    key: "ArrowLeft",
    modifier: "Meta"
  },
  {
    action: "SeekToEnd",
    key: "End",
    modifier: "NoModifier"
  },
  {
    action: "SeekToEnd",
    key: "ArrowRight",
    modifier: "Meta"
  }
];

var make = Utils.neverRerender(function (props) {
      return JsxRuntime.jsx("div", {
                  children: JsxRuntime.jsx("hr", {
                        className: "mx-2 h-9 border-gray-600 border bg-none"
                      })
                });
    });

var DockDivider = {
  make: make
};

var baseClass = "flex items-center justify-center p-2 shadow rounded-xl relative bottom-3 bg-zinc-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 duration-300";

var make$1 = React.memo(function (props) {
      var __className = props.className;
      var className = __className !== undefined ? __className : "";
      return JsxRuntime.jsx("div", {
                  children: props.children,
                  className: Cx.cx([
                        baseClass,
                        className
                      ])
                });
    });

var DockSpace = {
  baseClass: baseClass,
  make: make$1
};

var make$2 = React.memo(function (props) {
      var __highlight = props.highlight;
      var onClick = props.onClick;
      var __className = props.className;
      var className = __className !== undefined ? __className : "";
      var highlight = __highlight !== undefined ? __highlight : false;
      return JsxRuntime.jsxs("button", {
                  children: [
                    JsxRuntime.jsx("span", {
                          children: props.label,
                          className: "sr-only"
                        }),
                    JsxRuntime.jsx("span", {
                          children: props.children,
                          className: "group-active:scale-90 flex items-center gap-2 transition-transform"
                        })
                  ],
                  className: Cx.cx([
                        baseClass,
                        "group hover:scale-110 transition-all duration-200",
                        highlight ? "bg-gradient-to-tr from-amber-500/90 via-orange-500/90 to-fuchsia-400/80 hover:from-orange-300/80 hover:to-fuchsia-200/80 focus-visible:!ring-white" : "bg-slate-700 hover:bg-slate-500",
                        className
                      ]),
                  onClick: (function (param) {
                      onClick();
                    })
                });
    });

var DockButton = {
  make: make$2
};

function Dock(props) {
  var fullScreenToggler = props.fullScreenToggler;
  var render = props.render;
  var subtitlesManager = props.subtitlesManager;
  var context = EditorContext.useEditorContext();
  var match = Hooks.useToggle(false);
  var collapsedToggle = match[1];
  var match$1 = context.usePlayer();
  var playerDispatch = match$1[1];
  var player = match$1[0];
  var handlePlayOrPause = function (param) {
    var match = context.getImmediatePlayerState().playState;
    var tmp;
    tmp = match === "Playing" ? "Pause" : "Play";
    playerDispatch(tmp);
  };
  var handleSetVolume = Hooks.useEvent(function (value) {
        playerDispatch({
              TAG: "SetVolume",
              _0: value
            });
      });
  var increaseVolume = Hooks.useEvent(function () {
        Core__Option.forEach(context.getImmediatePlayerState().volume, (function (volume) {
                playerDispatch({
                      TAG: "SetVolume",
                      _0: Player.validateVolume(volume + 5 | 0)
                    });
              }));
      });
  var decreaseVolume = Hooks.useEvent(function () {
        Core__Option.forEach(context.getImmediatePlayerState().volume, (function (volume) {
                playerDispatch({
                      TAG: "SetVolume",
                      _0: Player.validateVolume(volume - 5 | 0)
                    });
              }));
      });
  var handleSeekLeft = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: context.getImmediatePlayerState().ts - 2
            });
      });
  var handleSeekRight = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: context.getImmediatePlayerState().ts + 2
            });
      });
  var toggleMute = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "SetVolume",
              _0: 0
            });
      });
  var seekToStart = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: 0
            });
      });
  var seekToEnd = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: context.videoMeta.duration
            });
      });
  var editCurrentSubtitle = Hooks.useEvent(function () {
        setTimeout((function () {
                Core__Option.forEach(Core__Option.flatMap(Caml_option.nullable_to_opt(document.querySelector("#current-cue textarea")), Webapi__Dom__HtmlInputElement.ofElement), (function (prim) {
                        prim.focus();
                      }));
              }), 0);
      });
  var moveToCue = Hooks.useEvent(function (shift) {
        var currentOrLastCue = Utils.$$Option.unwrapOrElse(context.getImmediatePlayerState().currentPlayingCue, (function () {
                return Subtitles.lookUpLastPlayedCue(subtitlesManager.activeSubtitles, context.getImmediatePlayerState().ts);
              }));
        if (currentOrLastCue === undefined) {
          if (shift < 0) {
            return handleSeekLeft();
          } else if (shift > 0) {
            return handleSeekRight();
          } else {
            return ;
          }
        }
        var newIndex = currentOrLastCue.currentIndex + shift | 0;
        var newCue = subtitlesManager.activeSubtitles[newIndex];
        if (newCue !== undefined) {
          return playerDispatch({
                      TAG: "Seek",
                      _0: Subtitles.start(newCue)
                    });
        }
        
      });
  var startRender = Hooks.useEvent(function () {
        playerDispatch("StopForRender");
        Core__Promise.$$catch(render(context.getImmediateStyleState()), (function (param) {
                return Promise.resolve(playerDispatch("AbortRender"));
              }));
      });
  Shortcut.useKeyboardShortcuts(shortcuts, (function (shortcut) {
          var match = shortcut.action;
          switch (match) {
            case "PlayOrPause" :
                return handlePlayOrPause();
            case "SeekForward" :
                return handleSeekRight();
            case "SeekBack" :
                return handleSeekLeft();
            case "IncreaseVolume" :
                return increaseVolume();
            case "DecreaseVolume" :
                return decreaseVolume();
            case "EditCurrentSubtitle" :
                return editCurrentSubtitle();
            case "ToggleDock" :
                return collapsedToggle.toggle();
            case "StartRender" :
                return startRender();
            case "ToggleFullScreen" :
                return fullScreenToggler.toggle();
            case "SeekToStart" :
                return seekToStart();
            case "SeekToEnd" :
                return seekToEnd();
            case "Mute" :
                return toggleMute();
            case "SeekToNextCue" :
                return moveToCue(1);
            case "SeekToPreviousCue" :
                return moveToCue(-1);
            
          }
        }));
  var match$2 = player.playState;
  var tmp;
  switch (match$2) {
    case "Playing" :
        tmp = JsxRuntime.jsx(Solid.PauseIcon, {
              className: "size-6 mx-0.5"
            });
        break;
    case "Paused" :
    case "Idle" :
        tmp = JsxRuntime.jsx(Solid.PlayIcon, {
              className: "size-6 mx-0.5"
            });
        break;
    case "StoppedForRender" :
        tmp = JsxRuntime.jsx(Spinner.make, {
              size: 1.5,
              className: "mx-1"
            });
        break;
    
  }
  var volume = player.volume;
  var match$3 = subtitlesManager.transcriptionState;
  var tmp$1;
  var exit = 0;
  if (typeof match$3 !== "object") {
    tmp$1 = null;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp$1 = JsxRuntime.jsxs(JsxRuntime.Fragment, {
          children: [
            JsxRuntime.jsx(make, {}),
            JsxRuntime.jsxs(make$2, {
                  children: [
                    JsxRuntime.jsx(Outline.SparklesIcon, {
                          className: "size-5"
                        }),
                    "Render video"
                  ],
                  label: "Render video file",
                  className: "whitespace-nowrap flex font-medium hover:!bg-orange-400 px-4",
                  onClick: startRender,
                  highlight: true
                })
          ]
        });
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs(make$1, {
                      children: [
                        JsxRuntime.jsx("span", {
                              children: Utils.Duration.formatSeconds(player.ts)
                            }),
                        JsxRuntime.jsx("span", {
                              children: " / ",
                              className: "normal-nums relative bottom-px"
                            }),
                        JsxRuntime.jsx("span", {
                              children: Utils.Duration.formatSeconds(context.videoMeta.duration)
                            })
                      ],
                      className: "tabular-nums space-x-1"
                    }),
                JsxRuntime.jsx(make, {}),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Icons.BackwardIcon.make, {
                            className: "size-5 mx-0.5"
                          }),
                      label: "Play forward 5 seconds",
                      onClick: handleSeekLeft
                    }),
                JsxRuntime.jsx(make$2, {
                      children: tmp,
                      label: "Play",
                      onClick: handlePlayOrPause,
                      highlight: true
                    }),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Outline.ArrowUturnRightIcon, {
                            className: "size-5 mx-0.5"
                          }),
                      label: "Play back 5 seconds",
                      onClick: handleSeekRight
                    }),
                JsxRuntime.jsxs(make$1, {
                      children: [
                        volume !== undefined && volume > 0 ? JsxRuntime.jsx(Outline.SpeakerWaveIcon, {
                                className: "size-7"
                              }) : JsxRuntime.jsx(Outline.SpeakerXMarkIcon, {
                                className: "size-7 text-gray-400"
                              }),
                        JsxRuntime.jsx(Slider.make, {
                              onValueChange: handleSetVolume,
                              disabled: Core__Option.isNone(player.volume),
                              value: Utils.$$Option.unwrapOr(player.volume, 0),
                              min: Player.min_volume,
                              max: Player.max_volume,
                              step: 1
                            })
                      ],
                      className: "w-40"
                    }),
                JsxRuntime.jsx(make, {}),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Outline.ArrowsPointingOutIcon, {
                            className: "size-6 mx-0.5"
                          }),
                      label: "Turn on/off full-screen mode",
                      onClick: fullScreenToggler.toggle
                    }),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Outline.PencilSquareIcon, {
                            className: "size-6 mx-0.5"
                          }),
                      label: "Edit current subtitle",
                      onClick: editCurrentSubtitle
                    }),
                tmp$1
              ],
              className: Cx.cx([
                    "absolute bottom-0 w-auto transition-transform transform-gpu left-1/2 px-4 pt-1 space-x-2 bg-zinc-900/30 border-t border-x border-gray-100/20 shadow-xl rounded-t-lg backdrop-blur-lg flex -translate-x-1/2",
                    match[0] ? "translate-y-16 duration-300" : ""
                  ])
            });
}

var make$3 = Dock;

export {
  DocumentEvent ,
  shortcuts ,
  DockDivider ,
  DockSpace ,
  DockButton ,
  make$3 as make,
}
/* DocumentEvent Not a pure module */
