// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.res.mjs";
import * as Web from "../../bindings/Web.res.mjs";
import * as Hooks from "../../hooks/Hooks.res.mjs";
import * as Icons from "../../ui/Icons.res.mjs";
import * as Utils from "../../Utils.res.mjs";
import * as React from "react";
import * as Player from "../../Player.res.mjs";
import * as Slider from "../../ui/Slider.res.mjs";
import * as Spinner from "../../ui/Spinner.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as EditorContext from "./EditorContext.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Webapi__Dom__Window from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Window.res.mjs";
import * as Webapi__Dom__EventTarget from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__EventTarget.res.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as Outline from "@heroicons/react/24/outline";

var DocumentEvent = Webapi__Dom__EventTarget.Impl({});

var make = Utils.neverRerender(function (props) {
      return JsxRuntime.jsx("div", {
                  children: JsxRuntime.jsx("hr", {
                        className: "mx-2 h-9 border-gray-600 border bg-none"
                      })
                });
    });

var DockDivider = {
  make: make
};

var baseClass = "flex items-center justify-center p-2 shadow rounded-xl relative bottom-3 bg-zinc-700 duration-300";

var make$1 = React.memo(function (props) {
      var __className = props.className;
      var className = __className !== undefined ? __className : "";
      return JsxRuntime.jsx("div", {
                  children: props.children,
                  className: Cx.cx([
                        baseClass,
                        className
                      ])
                });
    });

var DockSpace = {
  baseClass: baseClass,
  make: make$1
};

var make$2 = React.memo(function (props) {
      var __highlight = props.highlight;
      var onClick = props.onClick;
      var highlight = __highlight !== undefined ? __highlight : false;
      return JsxRuntime.jsxs("button", {
                  children: [
                    JsxRuntime.jsx("span", {
                          children: props.label,
                          className: "sr-only"
                        }),
                    JsxRuntime.jsx("span", {
                          children: props.children,
                          className: "group-active:scale-90 transition-transform"
                        })
                  ],
                  className: Cx.cx([
                        baseClass,
                        "group hover:scale-110",
                        highlight ? "bg-gradient-to-tr from-orange-500/90 to-fuchsia-400/80 hover:from-orange-300/80 hover:to-fuchsia-200/80" : "bg-slate-700 hover:bg-slate-500"
                      ]),
                  onClick: (function (param) {
                      onClick();
                    })
                });
    });

var DockButton = {
  make: make$2
};

function getFpsMarker(fps, desiredFps) {
  if (fps !== undefined) {
    if (fps < desiredFps * 0.5) {
      return "Red";
    } else if (fps < desiredFps * 0.8) {
      return "Yellow";
    } else {
      return "Green";
    }
  } else {
    return "White";
  }
}

function Dock(props) {
  var fullScreenToggler = props.fullScreenToggler;
  var context = EditorContext.useEditorContext();
  var match = Hooks.useToggle(false);
  var collapsedToggle = match[1];
  var isCollapsed = match[0];
  var match$1 = context.usePlayer();
  var playerDispatch = match$1[1];
  var player = match$1[0];
  var handlePlayOrPause = function (param) {
    var match = context.getImmediatePlayerState().playState;
    var tmp;
    tmp = match === "Playing" ? "Pause" : "Play";
    playerDispatch(tmp);
  };
  var handleSetVolume = Hooks.useEvent(function (value) {
        Core__Option.forEach(value, (function (value) {
                playerDispatch({
                      TAG: "SetVolume",
                      _0: value
                    });
              }));
      });
  var increaseVolume = Hooks.useEvent(function () {
        Core__Option.forEach(context.getImmediatePlayerState().volume, (function (volume) {
                playerDispatch({
                      TAG: "SetVolume",
                      _0: Player.validateVolume(volume + 5 | 0)
                    });
              }));
      });
  var decreaseVolume = Hooks.useEvent(function () {
        Core__Option.forEach(context.getImmediatePlayerState().volume, (function (volume) {
                playerDispatch({
                      TAG: "SetVolume",
                      _0: Player.validateVolume(volume - 5 | 0)
                    });
              }));
      });
  var handleSeekLeft = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: context.getImmediatePlayerState().frame - 2
            });
      });
  var handleSeekRight = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: context.getImmediatePlayerState().frame + 2
            });
      });
  var toggleMute = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "SetVolume",
              _0: 0
            });
      });
  var seekToStart = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: 0
            });
      });
  var seekToEnd = Hooks.useEvent(function () {
        playerDispatch({
              TAG: "Seek",
              _0: context.videoMeta.duration
            });
      });
  var toggleDock = Hooks.useEvent(function () {
        collapsedToggle.toggle();
        console.log("Press t to show/hide dock controls");
      });
  React.useEffect((function () {
          var handleKeydown = function (e) {
            if (!Utils.Bool.invert(Web.$$Element.isFocusable(e.target))) {
              return ;
            }
            var match = e.key;
            switch (match) {
              case " " :
                  return handlePlayOrPause();
              case "ArrowLeft" :
                  if (e.shiftKey) {
                    return seekToStart();
                  } else {
                    return handleSeekLeft();
                  }
              case "ArrowRight" :
                  if (e.shiftKey) {
                    return seekToEnd();
                  } else {
                    return handleSeekRight();
                  }
              case "End" :
              case "G" :
                  return seekToEnd();
              case "0" :
              case "Home" :
              case "J" :
                  return seekToStart();
              case "F" :
              case "f" :
                  return fullScreenToggler.toggle();
              case "ArrowDown" :
              case "h" :
                  break;
              case "j" :
                  return handleSeekLeft();
              case "k" :
                  return handleSeekRight();
              case "ArrowUp" :
              case "l" :
                  return increaseVolume();
              case "T" :
              case "t" :
                  return collapsedToggle.toggle();
              default:
                return ;
            }
            if (e.ctrlKey) {
              return toggleMute();
            } else {
              return decreaseVolume();
            }
          };
          window.addEventListener("keydown", handleKeydown);
          return (function () {
                    window.removeEventListener("keydown", handleKeydown);
                  });
        }), []);
  var match$2 = player.playState;
  var tmp;
  switch (match$2) {
    case "Playing" :
        tmp = JsxRuntime.jsx(Solid.PauseIcon, {
              className: "size-6"
            });
        break;
    case "Paused" :
    case "WaitingForAction" :
        tmp = JsxRuntime.jsx(Solid.PlayIcon, {
              className: "size-6"
            });
        break;
    case "CantPlay" :
        tmp = JsxRuntime.jsx(Spinner.make, {});
        break;
    
  }
  var volume = player.volume;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs(make$1, {
                      children: [
                        JsxRuntime.jsx("span", {
                              children: Utils.Duration.formatSeconds(player.frame)
                            }),
                        JsxRuntime.jsx("span", {
                              children: " / ",
                              className: "normal-nums relative bottom-px"
                            }),
                        JsxRuntime.jsx("span", {
                              children: Utils.Duration.formatSeconds(context.videoMeta.duration)
                            })
                      ],
                      className: "tabular-nums space-x-1"
                    }),
                JsxRuntime.jsx(make, {}),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Icons.BackwardIcon.make, {
                            className: "size-6"
                          }),
                      label: "Play forward 5 seconds",
                      onClick: handleSeekLeft
                    }),
                JsxRuntime.jsx(make$2, {
                      children: tmp,
                      label: "Play",
                      onClick: handlePlayOrPause,
                      highlight: true
                    }),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Outline.ForwardIcon, {
                            className: "size-6"
                          }),
                      label: "Play back 5 seconds",
                      onClick: handleSeekRight
                    }),
                JsxRuntime.jsxs(make$1, {
                      children: [
                        volume !== undefined && volume > 0 ? JsxRuntime.jsx(Outline.SpeakerWaveIcon, {
                                className: "size-6"
                              }) : JsxRuntime.jsx(Outline.SpeakerXMarkIcon, {
                                className: "size-6 text-gray-400"
                              }),
                        JsxRuntime.jsx(Slider.make, {
                              onValueChange: handleSetVolume,
                              disabled: Core__Option.isNone(player.volume),
                              value: Utils.$$Option.unwrapOr(player.volume, 0),
                              min: Player.min_volume,
                              max: Player.max_volume,
                              step: 1
                            })
                      ]
                    }),
                JsxRuntime.jsx(make, {}),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Outline.ArrowsPointingOutIcon, {
                            className: "size-6"
                          }),
                      label: "Turn on/off full-screen mode",
                      onClick: fullScreenToggler.toggle
                    }),
                JsxRuntime.jsx(make$2, {
                      children: JsxRuntime.jsx(Outline.ArrowDownTrayIcon, {
                            className: Cx.cx([
                                  "size-6 transition-transform",
                                  isCollapsed ? "rotate-180" : ""
                                ])
                          }),
                      label: "Show/Hide dock controls",
                      onClick: toggleDock
                    })
              ],
              className: Cx.cx([
                    "absolute bottom-0 w-auto transition-transform transform-gpu left-1/2 px-4 pt-1 space-x-2 bg-zinc-900/30 border-t border-x border-gray-100/20 shadow-xl rounded-t-lg backdrop-blur-lg flex -translate-x-1/2",
                    isCollapsed ? "translate-y-16 duration-300" : ""
                  ])
            });
}

var make$3 = Dock;

export {
  DocumentEvent ,
  DockDivider ,
  DockSpace ,
  DockButton ,
  getFpsMarker ,
  make$3 as make,
}
/* DocumentEvent Not a pure module */
