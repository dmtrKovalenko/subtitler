// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.bs.js";
import * as Dock from "./Dock.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Hooks from "../hooks/Hooks.bs.js";
import * as Icons from "./icons/Icons.bs.js";
import * as Utils from "../Utils.bs.js";
import * as React from "react";
import * as Timeline from "./Timeline/Timeline.bs.js";
import * as $$MediaList from "../MediaList.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactHelmet from "react-helmet";
import * as EditorContext from "../EditorContext.bs.js";
import * as UseEditorLayout from "../hooks/useEditorLayout.bs.js";
import HtmlReactParser from "html-react-parser";

function a(prim) {
  return {};
}

function Editor(Props) {
  var context = EditorContext.useEditorContext(undefined);
  var match = Curry._1(context.usePlayer, undefined);
  var match$1 = Hooks.useToggle(false);
  var layout = Hooks.useEditorLayout(match$1[0]);
  var previewRef = React.useRef(null);
  var match$2 = React.useState(function () {
    var match = context.options.mediaListLayout;
    if (
      match === "list" ||
      (match === "fromAspectRatio" &&
        layout.preview.width / layout.preview.height > 1.3)
    ) {
      return /* List */ 1;
    } else {
      return /* Grid */ 0;
    }
  });
  var setListVariant = match$2[1];
  var listVariant = match$2[0];
  var videoTitle = React.useMemo(
    function () {
      var name = Utils.$$Array.last(context.videoMeta.name.split("::"));
      if (name !== undefined) {
        return name;
      } else {
        return "Unknown video";
      }
    },
    [context.videoMeta],
  );
  React.useEffect(function () {
    Belt_Option.forEach(
      Caml_option.nullable_to_opt(previewRef.current),
      function (param) {
        console.log(
          "Happy video hacking! Your preview will be rendered at",
          param,
        );
      },
    );
  }, []);
  return React.createElement(
    "div",
    {
      className: "w-screen h-screen bg-gray-900 overflow-hidden relative",
      id: "fframes-editor",
    },
    React.createElement(
      ReactHelmet.Helmet,
      {
        children: null,
      },
      React.createElement("title", undefined, videoTitle),
      React.createElement(
        "style",
        {
          type: "text/css",
        },
        "\n            #editor-preview > svg {\n              transform-origin: top left !important;\n              transform: scale(" +
          layout.preview.scale.toString() +
          ") !important\n            }\n          ",
      ),
    ),
    React.createElement(
      "div",
      {
        className: "overflow-auto flex justify-center w-full",
      },
      Utils.$$Option.unwrapOr(
        Belt_Option.map(layout.mediaControls, function (size) {
          return React.createElement(
            "div",
            {
              className:
                "col-span-2 h-full overflow-auto flex flex-col p-4 border-r border-gray-800",
              style: UseEditorLayout.sizeToStyle(size),
            },
            React.createElement(
              "div",
              {
                className: "flex items-center justify-between mb-6 pt-1 gap-2",
              },
              React.createElement(
                "h1",
                {
                  className:
                    "text-3xl mt-px font-medium text-white grow-0 truncate",
                },
                videoTitle,
              ),
              React.createElement(
                "div",
                {
                  className: "isolate flex rounded-md shadow-sm",
                },
                React.createElement(
                  "button",
                  {
                    className: Cx.cx([
                      "transition-colors relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-800 ring-1 ring-inset ring-gray-800 hover:bg-gray-50 focus:z-10",
                      listVariant ? "bg-slate-100" : "bg-slate-300",
                    ]),
                    type: "button",
                    onClick: function (param) {
                      return Curry._1(setListVariant, function (param) {
                        return /* List */ 1;
                      });
                    },
                  },
                  React.createElement(
                    "span",
                    {
                      className: "sr-only",
                    },
                    "List view",
                  ),
                  React.createElement(Icons.ListViewIcon.make, {
                    color: "currentColor",
                    className: "h-4 w-5",
                  }),
                ),
                React.createElement(
                  "button",
                  {
                    className: Cx.cx([
                      "transition-colors relative -ml-px inline-flex items-center rounded-r-md px-2 py-2 text-gray-800 ring-1 ring-inset ring-gray-800 hover:bg-gray-50 focus:z-10",
                      listVariant ? "bg-slate-300" : "bg-slate-100",
                    ]),
                    type: "button",
                    onClick: function (param) {
                      return Curry._1(setListVariant, function (param) {
                        return /* Grid */ 0;
                      });
                    },
                  },
                  React.createElement(
                    "span",
                    {
                      className: "sr-only",
                    },
                    "Grid view",
                  ),
                  React.createElement(Icons.GridViewIcon.make, {
                    color: "currentColor",
                    className: "h-5 w-5",
                  }),
                ),
              ),
            ),
            React.createElement($$MediaList.make, {
              variant: listVariant,
            }),
          );
        }),
        null,
      ),
      React.createElement(
        "div",
        {
          ref: previewRef,
          className: "bg-black",
          id: "editor-preview",
          style: UseEditorLayout.sizeToStyle(layout.preview),
        },
        HtmlReactParser(Utils.$$Option.unwrapOr(match[0].svg, ""), {
          htmlparser2: {
            xmlMode: true,
          },
        }),
      ),
    ),
    Utils.$$Option.unwrapOr(
      Belt_Option.map(layout.timeLine, function (sectionSize) {
        return React.createElement(
          "div",
          {
            className: "shadow-lg w-screen bg-gray-800",
            style: UseEditorLayout.sizeToStyle(sectionSize),
          },
          React.createElement(Timeline.make, {
            sectionSize: sectionSize,
          }),
        );
      }),
      null,
    ),
    React.createElement(Dock.make, {
      fullScreenToggler: match$1[1],
    }),
  );
}

var make = Editor;

export { a, make };
/* Dock Not a pure module */
