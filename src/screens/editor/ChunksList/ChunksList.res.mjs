// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Slider from "../../../ui/Slider.res.mjs";
import * as Subtitles from "../Subtitles.res.mjs";
import * as ChunkEditor from "./ChunkEditor.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as EditorContext from "../EditorContext.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function useChunksState(subtitles, transcriptionInProgress, default_chunk_size) {
  var subtitlesRef = React.useRef(subtitles);
  var match = React.useState(function () {
        return "TranscriptionInProgress";
      });
  var setTranscriptionState = match[1];
  var transcriptionState = match[0];
  if (!transcriptionInProgress) {
    if (typeof transcriptionState !== "object") {
      if (subtitles.length > 0) {
        setTranscriptionState(function (param) {
              return {
                      TAG: "SubtitlesNotEdited",
                      resizedSubtitles: Subtitles.resizeChunks(Subtitles.splitChunksByPauses(subtitles), default_chunk_size),
                      size: default_chunk_size
                    };
            });
      }
      
    } else {
      transcriptionState.TAG === "SubtitlesNotEdited";
    }
  }
  var activeSubtitles;
  activeSubtitles = typeof transcriptionState !== "object" ? subtitles : (
      transcriptionState.TAG === "SubtitlesNotEdited" ? transcriptionState.resizedSubtitles : transcriptionState._0
    );
  subtitlesRef.current = activeSubtitles;
  return React.useMemo((function () {
                return {
                        activeSubtitles: activeSubtitles,
                        transcriptionState: transcriptionState,
                        subtitlesRef: subtitlesRef,
                        resizeSubtitles: (function (newSize) {
                            setTranscriptionState(function (param) {
                                  return {
                                          TAG: "SubtitlesNotEdited",
                                          resizedSubtitles: Subtitles.resizeChunks(Subtitles.splitChunksByPauses(subtitles), newSize),
                                          size: newSize
                                        };
                                });
                          }),
                        removeChunk: (function (index, joinSiblingsTimestamps) {
                            setTranscriptionState(function (param) {
                                  return {
                                          TAG: "SubtitlesEdited",
                                          _0: Subtitles.removeChunk(activeSubtitles, index, joinSiblingsTimestamps)
                                        };
                                });
                          }),
                        editText: (function (index, newText) {
                            setTranscriptionState(function (param) {
                                  return {
                                          TAG: "SubtitlesEdited",
                                          _0: Subtitles.editChunkText(activeSubtitles, index, newText)
                                        };
                                });
                          }),
                        editTimestamp: (function (index, newTimestamp) {
                            setTranscriptionState(function (param) {
                                  return {
                                          TAG: "SubtitlesEdited",
                                          _0: Subtitles.editChunkTimestamp(activeSubtitles, index, newTimestamp)
                                        };
                                });
                          })
                      };
              }), [
              transcriptionState,
              subtitles
            ]);
}

var make = React.memo(function (props) {
      var subtitlesManager = props.subtitlesManager;
      var ctx = EditorContext.useEditorContext();
      var match = ctx.usePlayer();
      var player = match[0];
      var match$1 = subtitlesManager.transcriptionState;
      var tmp;
      if (typeof match$1 !== "object") {
        tmp = JsxRuntime.jsx("p", {
              children: "Transciption in progress. Once finished you'll be able to edit and resize generated subtitles.",
              className: "text-center px-2 text-balance text-sm text-gray-500"
            });
      } else if (match$1.TAG === "SubtitlesNotEdited") {
        var size = match$1.size;
        tmp = JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h2", {
                      children: "Cue size " + size.toString() + " characters",
                      className: "text-center font-medium text-white/95"
                    }),
                JsxRuntime.jsx(Slider.make, {
                      onValueChange: subtitlesManager.resizeSubtitles,
                      disabled: false,
                      value: size,
                      min: 5,
                      max: 200,
                      step: 1
                    }),
                JsxRuntime.jsx("p", {
                      children: "Change the size each individual subtitle cue by dragging the slider above. Make sure you won't be able to resize cues after editing.",
                      className: "text-center px-2 text-balance text-sm text-gray-500"
                    })
              ],
              className: "flex flex-col w-full"
            });
      } else {
        tmp = null;
      }
      return JsxRuntime.jsxs("div", {
                  children: [
                    tmp,
                    subtitlesManager.activeSubtitles.map(function (chunk, index) {
                          var id = chunk.id;
                          return JsxRuntime.jsx(ChunkEditor.make, {
                                      index: index,
                                      readonly: subtitlesManager.transcriptionState === "TranscriptionInProgress",
                                      current: Core__Option.getOr(Core__Option.map(player.currentPlayingCue, (function (cue) {
                                                  return cue.currentIndex === index;
                                                })), false),
                                      chunk: chunk,
                                      removeChunk: subtitlesManager.removeChunk,
                                      onTimestampChange: subtitlesManager.editTimestamp,
                                      onTextChange: subtitlesManager.editText
                                    }, id !== undefined ? id.toString() : index.toString() + "-" + chunk.text);
                        })
                  ],
                  className: "flex flex-1 pb-4 min-h-0 flex-col gap-6"
                });
    });

export {
  useChunksState ,
  make ,
}
/* make Not a pure module */
