// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Player from "../../Player.res.mjs";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Webapi__Dom__Window from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Window.res.mjs";
import * as Webapi__Dom__EventTarget from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__EventTarget.res.mjs";

var DocumentEvent = Webapi__Dom__EventTarget.Impl({});

var editorContext = React.createContext(undefined);

var providerElement = editorContext.Provider;

function useEditorContext() {
  var context = React.useContext(editorContext);
  if (context !== undefined) {
    return context;
  } else {
    return PervasivesU.failwith("Missing editorContext.");
  }
}

function MakeEditorContext(Ctx) {
  var PlayerObserver = Player.MakePlayer(Ctx);
  var EditorContext$MakeEditorContext = function (props) {
    var usePlayer = function () {
      return [
              PlayerObserver.useObservable(),
              PlayerObserver.dispatch
            ];
    };
    var ctx_videoMeta = Ctx.videoMeta;
    var ctx_dom = Ctx.dom;
    var ctx_getImmediatePlayerState = PlayerObserver.get;
    var ctx = {
      ctx: Ctx,
      videoMeta: ctx_videoMeta,
      dom: ctx_dom,
      getImmediatePlayerState: ctx_getImmediatePlayerState,
      usePlayer: usePlayer
    };
    return React.createElement(providerElement, {
                value: ctx,
                children: props.children
              });
  };
  return {
          PlayerObserver: PlayerObserver,
          make: EditorContext$MakeEditorContext
        };
}

function makeEditorContextComponent(videoMeta, videoElement, timelineVideoElement, subtitlesRef, canvasRef, audioBuffer) {
  var dom_videoElement = videoElement.current;
  var dom_timelineVideoElement = timelineVideoElement.current;
  var dom = {
    videoElement: dom_videoElement,
    timelineVideoElement: dom_timelineVideoElement,
    canvasRef: canvasRef
  };
  var Ctx = {
    dom: dom,
    videoMeta: videoMeta,
    subtitlesRef: subtitlesRef,
    audioBuffer: audioBuffer
  };
  var PlayerObserver = Player.MakePlayer(Ctx);
  var EditorContext$MakeEditorContext = function (props) {
    var usePlayer = function () {
      return [
              PlayerObserver.useObservable(),
              PlayerObserver.dispatch
            ];
    };
    var ctx_getImmediatePlayerState = PlayerObserver.get;
    var ctx = {
      ctx: Ctx,
      videoMeta: videoMeta,
      dom: dom,
      getImmediatePlayerState: ctx_getImmediatePlayerState,
      usePlayer: usePlayer
    };
    return React.createElement(providerElement, {
                value: ctx,
                children: props.children
              });
  };
  var EditorContext = function (props) {
    return JsxRuntime.jsx(EditorContext$MakeEditorContext, {
                children: props.children
              });
  };
  return {
          make: EditorContext
        };
}

export {
  DocumentEvent ,
  editorContext ,
  providerElement ,
  useEditorContext ,
  MakeEditorContext ,
  makeEditorContextComponent ,
}
/* DocumentEvent Not a pure module */
