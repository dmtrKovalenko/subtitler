// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Web from "../../bindings/Web.res.mjs";
import * as React from "react";
import * as Player from "../../Player.res.mjs";
import * as Renderer from "./Renderer.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Webapi__Dom__Window from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Window.res.mjs";
import * as Webapi__Dom__EventTarget from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__EventTarget.res.mjs";

var DocumentEvent = Webapi__Dom__EventTarget.Impl({});

var editorContext = React.createContext(undefined);

var providerElement = editorContext.Provider;

function useEditorContext() {
  var context = React.useContext(editorContext);
  if (context !== undefined) {
    return context;
  } else {
    return PervasivesU.failwith("Missing editorContext.");
  }
}

function MakeEditorContext(Ctx) {
  var PlayerObserver = Player.MakePlayer(Ctx);
  var EditorContext$MakeEditorContext = function (props) {
    var usePlayer = function () {
      return [
              PlayerObserver.useObservable(),
              PlayerObserver.dispatch
            ];
    };
    React.useEffect((function () {
            Core__Option.forEach(Core__Option.map(Caml_option.nullable_to_opt(Ctx.canvasRef.current), (function (el) {
                        return el.getContext("2d");
                      })), (function (ctx) {
                    Ctx.renderVideoFrame(ctx, undefined, undefined, undefined, undefined);
                  }));
          }), []);
    var ctx_videoMeta = Ctx.videoMeta;
    var ctx_canvasRef = Ctx.canvasRef;
    var ctx_getImmediatePlayerState = PlayerObserver.get;
    var ctx_seekUnsafe = function (ts, cb) {
      Ctx.videoElement.currentTime = ts;
      Web.Video.onSeeked(Ctx.videoElement, cb);
    };
    var ctx_renderFrame = Ctx.renderVideoFrame;
    var ctx = {
      videoMeta: ctx_videoMeta,
      canvasRef: ctx_canvasRef,
      getImmediatePlayerState: ctx_getImmediatePlayerState,
      usePlayer: usePlayer,
      seekUnsafe: ctx_seekUnsafe,
      renderFrame: ctx_renderFrame
    };
    return React.createElement(providerElement, {
                value: ctx,
                children: props.children
              });
  };
  return {
          PlayerObserver: PlayerObserver,
          make: EditorContext$MakeEditorContext
        };
}

function makeEditorContextComponent(videoMeta, videoElement, subtitlesRef, canvasRef) {
  var videoElement$1 = videoElement.current;
  var renderVideoFrame = Renderer.renderVideoFrame(videoMeta, videoElement$1);
  var Ctx = {
    videoElement: videoElement$1,
    videoMeta: videoMeta,
    canvasRef: canvasRef,
    renderVideoFrame: renderVideoFrame
  };
  var PlayerObserver = Player.MakePlayer(Ctx);
  var EditorContext$MakeEditorContext = function (props) {
    var usePlayer = function () {
      return [
              PlayerObserver.useObservable(),
              PlayerObserver.dispatch
            ];
    };
    React.useEffect((function () {
            Core__Option.forEach(Core__Option.map(Caml_option.nullable_to_opt(canvasRef.current), (function (el) {
                        return el.getContext("2d");
                      })), (function (ctx) {
                    renderVideoFrame(ctx, undefined, undefined, undefined, undefined);
                  }));
          }), []);
    var ctx_getImmediatePlayerState = PlayerObserver.get;
    var ctx_seekUnsafe = function (ts, cb) {
      videoElement$1.currentTime = ts;
      Web.Video.onSeeked(videoElement$1, cb);
    };
    var ctx = {
      videoMeta: videoMeta,
      canvasRef: canvasRef,
      getImmediatePlayerState: ctx_getImmediatePlayerState,
      usePlayer: usePlayer,
      seekUnsafe: ctx_seekUnsafe,
      renderFrame: renderVideoFrame
    };
    return React.createElement(providerElement, {
                value: ctx,
                children: props.children
              });
  };
  var EditorContext = function (props) {
    return JsxRuntime.jsx(EditorContext$MakeEditorContext, {
                children: props.children
              });
  };
  return {
          make: EditorContext
        };
}

export {
  DocumentEvent ,
  editorContext ,
  providerElement ,
  useEditorContext ,
  MakeEditorContext ,
  makeEditorContextComponent ,
}
/* DocumentEvent Not a pure module */
