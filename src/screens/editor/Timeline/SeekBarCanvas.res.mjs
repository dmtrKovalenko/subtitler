// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.res.mjs";
import * as Web from "../../../bindings/Web.res.mjs";
import * as React from "react";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as CanvasSize from "./canvasSize.res.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as EditorContext from "../EditorContext.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function renderSeekBar(ctx, size, playState) {
  var x = CanvasSize.tsToFrame(playState.ts, size);
  ctx.beginPath();
  ctx.moveTo(x, 0);
  ctx.lineTo(x, size.height);
  ctx.moveTo(x - 2, 0);
  ctx.lineTo(x, 7);
  ctx.lineTo(x + 2, 0);
  ctx.lineTo(x - 2, 0);
  ctx.strokeStyle = "#fb923c";
  ctx.stroke();
  ctx.closePath();
}

function calculateFrameFromEvent(e, size) {
  var rectLeft = Web.$$Element.targetAsElement(e.target).getBoundingClientRect().left | 0;
  var x = (e.clientX - rectLeft | 0) - 32 | 0;
  if (x > 0) {
    return x * size.pxToFrameRation;
  } else {
    return 0;
  }
}

function SeekBarCanvas(props) {
  var size = props.size;
  var seekCanvasRef = React.useRef(null);
  var editorContext = EditorContext.useEditorContext();
  var match = editorContext.usePlayer();
  var dispatch = match[1];
  var player = match[0];
  CanvasSize.useCanvasScale(seekCanvasRef, size);
  React.useEffect((function () {
          Belt_Option.map(Caml_option.nullable_to_opt(seekCanvasRef.current), (function (canvasElement) {
                  var ctx = canvasElement.getContext("2d");
                  ctx.clearRect(0, 0, size.scaledWidth, size.scaledHeight);
                  renderSeekBar(ctx, size, player);
                }));
        }), [
        size,
        player.ts,
        player.playState
      ]);
  var handleMouseMove = React.useCallback((function (e) {
          if (editorContext.getImmediatePlayerState().playState !== "Playing" && document.hasFocus()) {
            return dispatch({
                        TAG: "NewFrame",
                        _0: calculateFrameFromEvent(e, size)
                      });
          }
          
        }), [size]);
  var handleClick = React.useCallback((function (e) {
          var frame = calculateFrameFromEvent(e, size);
          dispatch({
                TAG: "Seek",
                _0: frame
              });
          dispatch("Play");
        }), [size]);
  var match$1 = player.playState;
  var tmp;
  switch (match$1) {
    case "Playing" :
        tmp = "cursor-pointer";
        break;
    case "Paused" :
    case "Idle" :
        tmp = "cursor-col-resize";
        break;
    case "StoppedForRender" :
        tmp = "cursor-wait";
        break;
    
  }
  return JsxRuntime.jsx("canvas", {
              ref: Caml_option.some(seekCanvasRef),
              className: Cx.cx([
                    "absolute inset-0",
                    tmp
                  ]),
              style: {
                height: size.height.toString() + "px",
                width: size.width.toString() + "px"
              },
              height: Js_math.floor(size.height).toString() + "px",
              width: Js_math.floor(size.width).toString() + "px",
              onClick: handleClick,
              onMouseMove: handleMouseMove
            });
}

var Canvas;

var Canvas2d;

var make = SeekBarCanvas;

export {
  Canvas ,
  Canvas2d ,
  renderSeekBar ,
  calculateFrameFromEvent ,
  make ,
}
/* react Not a pure module */
